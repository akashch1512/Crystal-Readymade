{"ast":null,"code":"// import React, { useState } from 'react';\n// import './Register.css';\n\n// function Register({ onRegister }) {\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [confirmPassword, setConfirmPassword] = useState('');\n//   const [error, setError] = useState('');\n\n//   const validatePassword = (password) => {\n//     if (password.length < 8) {\n//       return 'Password must be at least 8 characters long.';\n//     }\n\n//     const uniqueChars = new Set(password).size;\n//     if (uniqueChars === 1) {\n//       return 'Password cannot contain all repeated characters.';\n//     }\n\n//     return '';\n//   };\n\n//   const handleRegister = async (e) => {\n//     e.preventDefault();\n\n//     const passwordError = validatePassword(password);\n//     if (passwordError) {\n//       setError(passwordError);\n//       return;\n//     }\n\n//     if (password !== confirmPassword) {\n//       setError('Passwords do not match');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/register', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ username, password }),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         onRegister(username);\n//       } else {\n//         setError(data.message || 'Registration failed');\n//       }\n//     } catch (err) {\n//       setError('Server error');\n//     }\n//   };\n\n//   return (\n//     <div className=\"register-page\">\n//       <div className=\"register-card\">\n//         <h2>Register</h2>\n//         <form onSubmit={handleRegister}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Username\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//             required\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Enter Password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             required\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Confirm Password\"\n//             value={confirmPassword}\n//             onChange={(e) => setConfirmPassword(e.target.value)}\n//             required\n//           />\n//           {error && <p className=\"error-message\">{error}</p>}\n//           <button type=\"submit\" disabled={!username || !password || !confirmPassword || !!error}>\n//             Register\n//           </button>\n//         </form>\n//         <p>\n//           Already have an account? <a href=\"/login\">Login here</a>\n//         </p>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Register;","map":{"version":3,"names":[],"sources":["/home/gaurav/pcomapare/product-comparison/src/components/Register.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './Register.css';\n\n// function Register({ onRegister }) {\n//   const [username, setUsername] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [confirmPassword, setConfirmPassword] = useState('');\n//   const [error, setError] = useState('');\n\n//   const validatePassword = (password) => {\n//     if (password.length < 8) {\n//       return 'Password must be at least 8 characters long.';\n//     }\n\n//     const uniqueChars = new Set(password).size;\n//     if (uniqueChars === 1) {\n//       return 'Password cannot contain all repeated characters.';\n//     }\n\n//     return '';\n//   };\n\n//   const handleRegister = async (e) => {\n//     e.preventDefault();\n\n//     const passwordError = validatePassword(password);\n//     if (passwordError) {\n//       setError(passwordError);\n//       return;\n//     }\n\n//     if (password !== confirmPassword) {\n//       setError('Passwords do not match');\n//       return;\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:5000/api/register', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ username, password }),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         onRegister(username);\n//       } else {\n//         setError(data.message || 'Registration failed');\n//       }\n//     } catch (err) {\n//       setError('Server error');\n//     }\n//   };\n\n//   return (\n//     <div className=\"register-page\">\n//       <div className=\"register-card\">\n//         <h2>Register</h2>\n//         <form onSubmit={handleRegister}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter Username\"\n//             value={username}\n//             onChange={(e) => setUsername(e.target.value)}\n//             required\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Enter Password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             required\n//           />\n//           <input\n//             type=\"password\"\n//             placeholder=\"Confirm Password\"\n//             value={confirmPassword}\n//             onChange={(e) => setConfirmPassword(e.target.value)}\n//             required\n//           />\n//           {error && <p className=\"error-message\">{error}</p>}\n//           <button type=\"submit\" disabled={!username || !password || !confirmPassword || !!error}>\n//             Register\n//           </button>\n//         </form>\n//         <p>\n//           Already have an account? <a href=\"/login\">Login here</a>\n//         </p>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Register;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}